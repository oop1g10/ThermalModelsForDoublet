function paramSamples = prepSamples_COMSOL(paramRanges, numberSamples)
% Generate random sampling of defined parameter using defined range and
% distribution
% paramRange.distribution = distribution of possible parameter values
%       supported 'Uniform' and 'Normal'
% paramRange.min, max = range for Uniform distribution
% paramRange.mean, sigma = parameters for Normal distribution

    % Random Seed is used to ensure that the parameter list generated by LatinHyperCube is unique for every row, 
    %and can be repeated for every given simulation
    %rng('shuffle'); 
    rng(1); 
    
    paramSamples = table;
    % For LatinHypercube sampling Check that ALL parameters have this sampling type
    if all(strcmp(paramRanges.distribution, 'LatinHypercubeUniform'))
        % Prepare LHC values (from 0 to 1)
        % (n,p) returns an n-by-p matrix, LHC_ratios, containing a latin hypercube sample 
        % of n values on each of p variables. (ie. parameters)
        %For each column of LH_values, the n values are randomly distributed with one from each interval (0,1/n), 
        % (1/n,2/n), ..., (1-1/n,1), and they are randomly permuted.
        LH_values = lhsdesign(numberSamples, size(paramRanges, 1));

        % Use them as ratios to multiply the chosen parameter ranges
        for i = 1:size(paramRanges, 1)
            paramSamples.(paramRanges.name{i}) = ...
                LH_values(:,i) * (paramRanges.max(i) - paramRanges.min(i)) + paramRanges.min(i);
        end
        
    else       
        % Other sampling methods
        for i = 1:size(paramRanges,1)
            if strcmp(paramRanges.distribution(i), 'Uniform')
                paramSamples.(paramRanges.name{i}) = ...
                    rand(numberSamples,1) * (paramRanges.max(i)-paramRanges.min(i)) + paramRanges.min(i);
            elseif strcmp(paramRanges.distribution(i), 'Normal')
                paramSamples.(paramRanges.name{i}) = ...
                    randn(numberSamples,1) * paramRanges.sigma(i) + paramRanges.mean(i);
            else
                error('Unsupported distribution %s', paramRanges.distribution{i});
            end
        end
    end
end